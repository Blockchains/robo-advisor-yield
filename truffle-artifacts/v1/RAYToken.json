{
  "contractName": "RAYToken",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x01ffc9a7"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x06fdde03"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x081812fc"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x095ea7b3"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x23b872dd"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x42842e0e"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x42966c68"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x6352211e"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x70a08231"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x95d89b41"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xa22cb465"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xb88d4fde"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_storage",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xc3fb90d6"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xc87b56dd"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xe985e9c5"
    },
    {
      "inputs": [
        {
          "name": "__storage",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor",
      "signature": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event",
      "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event",
      "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event",
      "signature": "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "mintRAYToken",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x6ede4983"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "getBeneficiary",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xba20dda4"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "name": "exists",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x56fa44a6"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b50604051602080620015fd83398101604081815291518282018352601682527f526f626f2041647669736f7220666f72205969656c64000000000000000000006020808401919091528351808501909452600384527f52415900000000000000000000000000000000000000000000000000000000009084015291620000c07f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006200017c810204565b620000f47f80ac58cd000000000000000000000000000000000000000000000000000000006401000000006200017c810204565b815162000109906005906020850190620001e9565b5080516200011f906006906020840190620001e9565b50620001547f5b5e139f000000000000000000000000000000000000000000000000000000006401000000006200017c810204565b505060088054600160a060020a031916600160a060020a03929092169190911790556200028e565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001ac57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022c57805160ff19168380011785556200025c565b828001600101855582156200025c579182015b828111156200025c5782518255916020019190600101906200023f565b506200026a9291506200026e565b5090565b6200028b91905b808211156200026a576000815560010162000275565b90565b61135f806200029e6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461010057806306fdde031461014b578063081812fc146101d5578063095ea7b31461020957806323b872dd1461022f57806342842e0e1461025957806342966c681461028357806356fa44a61461029b5780636352211e146102b35780636ede4983146102cb57806370a082311461030157806395d89b4114610322578063a22cb46514610337578063b88d4fde1461035d578063ba20dda4146103cc578063c3fb90d6146103e4578063c87b56dd146103f9578063e985e9c514610411575b600080fd5b34801561010c57600080fd5b506101377bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610438565b604080519115158252519081900360200190f35b34801561015757600080fd5b5061016061046c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019a578181015183820152602001610182565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e157600080fd5b506101ed600435610503565b60408051600160a060020a039092168252519081900360200190f35b34801561021557600080fd5b5061022d600160a060020a0360043516602435610535565b005b34801561023b57600080fd5b5061022d600160a060020a03600435811690602435166044356105eb565b34801561026557600080fd5b5061022d600160a060020a0360043581169060243516604435610610565b34801561028f57600080fd5b5061022d60043561062c565b3480156102a757600080fd5b5061013760043561064d565b3480156102bf57600080fd5b506101ed60043561065e565b3480156102d757600080fd5b506102ef600435600160a060020a03602435166106f3565b60408051918252519081900360200190f35b34801561030d57600080fd5b506102ef600160a060020a036004351661088a565b34801561032e57600080fd5b506101606108bd565b34801561034357600080fd5b5061022d600160a060020a0360043516602435151561091e565b34801561036957600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261022d94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506109a29650505050505050565b3480156103d857600080fd5b506101ed6004356109ca565b3480156103f057600080fd5b506101ed6109d5565b34801561040557600080fd5b506101606004356109e4565b34801561041d57600080fd5b50610137600160a060020a0360043581169060243516610a99565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b505050505090505b90565b600061050e82610ac7565b151561051957600080fd5b50600090815260026020526040902054600160a060020a031690565b60006105408261065e565b9050600160a060020a03838116908216141561055b57600080fd5b33600160a060020a038216148061057757506105778133610a99565b151561058257600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6105f53382610ae4565b151561060057600080fd5b61060b838383610b43565b505050565b61060b83838360206040519081016040528060008152506109a2565b6106363382610ae4565b151561064157600080fd5b61064a81610c6c565b50565b600061065882610ac7565b92915050565b600081815260016020526040812054600160a060020a0316801515610658576040805160e560020a62461bcd02815260206004820152603160248201527f23455243373231206f776e65724f6628293a205468657265206973206e6f207460448201527f6f6b656e20776974682074686973204944000000000000000000000000000000606482015290519081900360840190fd5b600854604080517f546f6b656e57726170706572436f6e7472616374000000000000000000000000815281519081900360140181207f0d2020dd0000000000000000000000000000000000000000000000000000000082526004820152905160009283923392600160a060020a039290921691630d2020dd9160248082019260209290919082900301818887803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b505050506040513d60208110156107b757600080fd5b5051600160a060020a031614610863576040805160e560020a62461bcd02815260206004820152604560248201527f23524159546f6b656e206f6e6c79546f6b656e57726170706572204d6f64696660448201527f6965723a204f6e6c7920546f6b656e20577261707065722063616e2063616c6c60648201527f2074686973000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600980546001019081905561087790610c7e565b90506108838382610d2c565b9392505050565b6000600160a060020a03821615156108a157600080fd5b50600160a060020a031660009081526003602052604090205490565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104f85780601f106104cd576101008083540402835291602001916104f8565b600160a060020a03821633141561093457600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6109ad8484846105eb565b6109b984848484610edc565b15156109c457600080fd5b50505050565b60006106588261065e565b600854600160a060020a031681565b60606109ef82610ac7565b15156109fa57600080fd5b60008281526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610af08361065e565b905080600160a060020a031684600160a060020a03161480610b2b575083600160a060020a0316610b2084610503565b600160a060020a0316145b80610b3b5750610b3b8185610a99565b949350505050565b82600160a060020a0316610b568261065e565b600160a060020a031614610b6957600080fd5b600160a060020a0382161515610b7e57600080fd5b610b878161105e565b600160a060020a038316600090815260036020526040902054610bb190600163ffffffff6110a616565b600160a060020a038085166000908152600360205260408082209390935590841681522054610be790600163ffffffff61112e16565b600160a060020a038084166000818152600360209081526040808320959095558582526001815290849020805473ffffffffffffffffffffffffffffffffffffffff191683179055835185815293519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b61064a610c788261065e565b826111b1565b60008030836040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610cf95780518252601f199092019160209182019101610cda565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b600160a060020a0382161515610db2576040805160e560020a62461bcd02815260206004820152603860248201527f23455243373231205f6d696e7428293a2043616e6e6f74206d696e742061207460448201527f6f6b656e20746f20746865206e756c6c20616464726573730000000000000000606482015290519081900360840190fd5b610dbb81610ac7565b15610e36576040805160e560020a62461bcd02815260206004820152603060248201527f234552433732313a205f6d696e7428293a204120746f6b656e20616c7265616460448201527f7920657869737473207769746820494400000000000000000000000000000000606482015290519081900360840190fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054610e849161112e565b600160a060020a03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600080610ef185600160a060020a03166111fd565b1515610f005760019150611055565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610f93578181015183820152602001610f7b565b50505050905090810190601f168015610fc05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610fe257600080fd5b505af1158015610ff6573d6000803e3d6000fd5b505050506040513d602081101561100c57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600081815260026020526040902054600160a060020a03161561064a576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008083831115611127576040805160e560020a62461bcd02815260206004820152603260248201527f23536166654d6174682073756228293a205468697320776f756c64207265737560448201527f6c7420696e20616e20756e646572666c6f770000000000000000000000000000606482015290519081900360840190fd5b5050900390565b600082820183811015610883576040805160e560020a62461bcd02815260206004820152603160248201527f23536166654d6174682061646428293a205468697320776f756c64207265737560448201527f6c7420696e20616e206f766572666c6f77000000000000000000000000000000606482015290519081900360840190fd5b6111bb8282611205565b60008181526007602052604090205460026000196101006001841615020190911604156111f95760008181526007602052604081206111f9916112da565b5050565b6000903b1190565b81600160a060020a03166112188261065e565b600160a060020a03161461122b57600080fd5b6112348161105e565b600160a060020a03821660009081526003602052604090205461125e90600163ffffffff6110a616565b600160a060020a03831660008181526003602090815260408083209490945584825260018152838220805473ffffffffffffffffffffffffffffffffffffffff191690558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b50805460018160011615610100020316600290046000825580601f10611300575061064a565b600091825260209182902061064a9261050092601f01048101905b8082111561132f576000815560010161131b565b50905600a165627a7a723058205bfac71d34176d2444bc9711c5923e30bdca22fdda136367546c754a592b8c020029",
  "deployedBytecode": "",
  "sourceMap": "1005:4511:72:-;;;2027:143;8:9:-1;5:2;;;30:1;27;20:12;5:2;2027:143:72;;;;;;;;;;;;;;;;660:237:40;;;;;;;;;2027:143:72;660:237:40;;;;;;;;;;;;;;;;;;;;;;;2027:143:72;639:39:53;658:19;639:18;;;;:39;:::i;:::-;1896::37;1915:19;1896:18;;;;:39;:::i;:::-;718:12:40;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;740:16:40;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;844:46:40;863:26;844:18;;;;:46;:::i;:::-;-1:-1:-1;;2133:8:72;:29;;-1:-1:-1;;;;;;2133:29:72;-1:-1:-1;;;;;2133:29:72;;;;;;;;;;1005:4511;;988:158:53;1063:25;;;;;;1055:34;;;;;;1099:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1099:40:53;1135:4;1099:40;;;988:158::o;1005:4511:72:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1005:4511:72;;;-1:-1:-1;1005:4511:72;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "1005:4511:72:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;776:133:53;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;776:133:53;-1:-1:-1;;776:133:53;;;;;;;;;;;;;;;;;;;;;;;1001:76:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:76:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1001:76:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3747:151:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3747:151:37;;;;;;;;;-1:-1:-1;;;;;3747:151:37;;;;;;;;;;;;;;3170:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3170:292:37;-1:-1:-1;;;;;3170:292:37;;;;;;;;;5302:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5302:180:37;-1:-1:-1;;;;;5302:180:37;;;;;;;;;;;;6121:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6121:181:37;-1:-1:-1;;;;;6121:181:37;;;;;;;;;;;;321:127:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;321:127:38;;;;;4182:146:72;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4182:146:72;;;;;2519:230:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2519:230:37;;;;;2546:300:72;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2546:300:72;;;-1:-1:-1;;;;;2546:300:72;;;;;;;;;;;;;;;;;;;;;2145:150:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2145:150:37;-1:-1:-1;;;;;2145:150:37;;;;;1185:80:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1185:80:40;;;;4190:213:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4190:213:37;-1:-1:-1;;;;;4190:213:37;;;;;;;;;7007:253;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7007:253:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7007:253:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7007:253:37;;-1:-1:-1;7007:253:37;;-1:-1:-1;;;;;;;7007:253:37;3381:143:72;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3381:143:72;;;;;1245:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1245:23:72;;;;1464:144:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1464:144:40;;;;;4724:145:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4724:145:37;-1:-1:-1;;;;;4724:145:37;;;;;;;;;;776:133:53;-1:-1:-1;;869:33:53;846:4;869:33;;;;;;;;;;;;;;776:133::o;1001:76:40:-;1065:5;1058:12;;;;;;;;-1:-1:-1;;1058:12:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1040:6;;1058:12;;1065:5;;1058:12;;1065:5;1058:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:76;;:::o;3747:151:37:-;3806:7;3833:16;3841:7;3833;:16::i;:::-;3825:25;;;;;;;;-1:-1:-1;3867:24:37;;;;:15;:24;;;;;;-1:-1:-1;;;;;3867:24:37;;3747:151::o;3170:292::-;3233:13;3249:16;3257:7;3249;:16::i;:::-;3233:32;-1:-1:-1;;;;;;3283:11:37;;;;;;;;3275:20;;;;;;3313:10;-1:-1:-1;;;;;3313:19:37;;;;:58;;;3336:35;3353:5;3360:10;3336:16;:35::i;:::-;3305:67;;;;;;;;3383:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;3383:29:37;-1:-1:-1;;;;;3383:29:37;;;;;;;;;3427:28;;3383:24;;3427:28;;;;;;;3170:292;;;:::o;5302:180::-;5392:39;5411:10;5423:7;5392:18;:39::i;:::-;5384:48;;;;;;;;5443:32;5457:4;5463:2;5467:7;5443:13;:32::i;:::-;5302:180;;;:::o;6121:181::-;6256:39;6273:4;6279:2;6283:7;6256:39;;;;;;;;;;;;;:16;:39::i;321:127:38:-;377:39;396:10;408:7;377:18;:39::i;:::-;369:48;;;;;;;;427:14;433:7;427:5;:14::i;:::-;321:127;:::o;4182:146:72:-;4261:11;4293:28;4312:7;4293:13;:28::i;:::-;4286:35;4182:146;-1:-1:-1;;4182:146:72:o;2519:230:37:-;2574:7;2609:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2609:20:37;2647:19;;;2639:81;;;;;-1:-1:-1;;;;;2639:81:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2546:300:72;1490:8;;1205:33;;;;;;;;;;;;;;;;1490:51;;;;;;;;;2676:7;;;;1545:10;;-1:-1:-1;;;;;1490:8:72;;;;;:27;;:51;;;;;;;;;;;;;;;2676:7;1490:8;:51;;;5:2:-1;;;;30:1;27;20:12;5:2;1490:51:72;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1490:51:72;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1490:51:72;-1:-1:-1;;;;;1490:65:72;;1469:181;;;;;-1:-1:-1;;;;;1469:181:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2700:4;:6;;;;;;;;2736:24;;:18;:24::i;:::-;2716:44;-1:-1:-1;2771:41:72;2783:11;2716:44;2771:11;:41::i;:::-;2830:9;2546:300;-1:-1:-1;;;2546:300:72:o;2145:150:37:-;2200:7;-1:-1:-1;;;;;2227:19:37;;;;2219:28;;;;;;-1:-1:-1;;;;;;2264:24:37;;;;;:17;:24;;;;;;;2145:150::o;1185:80:40:-;1251:7;1244:14;;;;;;;;-1:-1:-1;;1244:14:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1226:6;;1244:14;;1251:7;;1244:14;;1251:7;1244:14;;;;;;;;;;;;;;;;;;;;;;;;4190:213:37;-1:-1:-1;;;;;4269:16:37;;4275:10;4269:16;;4261:25;;;;;;4315:10;4296:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4296:34:37;;;;;;;;;;;;:45;;-1:-1:-1;;4296:45:37;;;;;;;;;;4356:40;;;;;;;4296:34;;4315:10;4356:40;;;;;;;;;;;4190:213;;:::o;7007:253::-;7106:31;7119:4;7125:2;7129:7;7106:12;:31::i;:::-;7204:48;7227:4;7233:2;7237:7;7246:5;7204:22;:48::i;:::-;7196:57;;;;;;;;7007:253;;;;:::o;3381:143:72:-;3459:7;3489:28;3508:7;3489:13;:28::i;1245:23::-;;;-1:-1:-1;;;;;1245:23:72;;:::o;1464:144:40:-;1522:6;1548:16;1556:7;1548;:16::i;:::-;1540:25;;;;;;;;1582:19;;;;:10;:19;;;;;;;;;1575:26;;;;;;-1:-1:-1;;1575:26:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1582:19;;1575:26;;1582:19;1575:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:144;;;:::o;4724:145:37:-;-1:-1:-1;;;;;4827:25:37;;;4804:4;4827:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4724:145::o;7449:152::-;7506:4;7538:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7538:20:37;7575:19;;;7449:152::o;7964:404::-;8049:4;8065:13;8081:16;8089:7;8081;:16::i;:::-;8065:32;;8284:5;-1:-1:-1;;;;;8273:16:37;:7;-1:-1:-1;;;;;8273:16:37;;:51;;;;8317:7;-1:-1:-1;;;;;8293:31:37;:20;8305:7;8293:11;:20::i;:::-;-1:-1:-1;;;;;8293:31:37;;8273:51;:87;;;;8328:32;8345:5;8352:7;8328:16;:32::i;:::-;8265:96;7964:404;-1:-1:-1;;;;7964:404:37:o;10222:402::-;10335:4;-1:-1:-1;;;;;10315:24:37;:16;10323:7;10315;:16::i;:::-;-1:-1:-1;;;;;10315:24:37;;10307:33;;;;;;-1:-1:-1;;;;;10358:16:37;;;;10350:25;;;;;;10386:23;10401:7;10386:14;:23::i;:::-;-1:-1:-1;;;;;10446:23:37;;;;;;:17;:23;;;;;;:30;;10474:1;10446:30;:27;:30;:::i;:::-;-1:-1:-1;;;;;10420:23:37;;;;;;;:17;:23;;;;;;:56;;;;10510:21;;;;;;;:28;;10536:1;10510:28;:25;:28;:::i;:::-;-1:-1:-1;;;;;10486:21:37;;;;;;;:17;:21;;;;;;;;:52;;;;10549:20;;;:11;:20;;;;;;:25;;-1:-1:-1;;10549:25:37;;;;;10590:27;;;;;;;10486:21;;10590:27;;;;;;;;;;;;;;;10222:402;;;:::o;9758:90::-;9809:32;9815:16;9823:7;9815;:16::i;:::-;9833:7;9809:5;:32::i;5320:193:72:-;5382:7;5405:20;5463:4;5470:5;5438:38;;;;;;-1:-1:-1;;;;;5438:38:72;-1:-1:-1;;;;;5438:38:72;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5438:38:72;;;5428:49;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;5428:49:72;;;;;;;;;;;;-1:-1:-1;;;;;;5320:193:72:o;8611:390:37:-;-1:-1:-1;;;;;8682:16:37;;;;8674:85;;;;;-1:-1:-1;;;;;8674:85:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8778:16;8786:7;8778;:16::i;:::-;8777:17;8769:78;;;;;-1:-1:-1;;;;;8769:78:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8858:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;8858:25:37;-1:-1:-1;;;;;8858:25:37;;;;;;;;8917:21;;:17;:21;;;;;;;:28;;:25;:28::i;:::-;-1:-1:-1;;;;;8893:21:37;;;;;;:17;:21;;;;;;;;:52;;;;8961:33;;;;;;;8893:21;;;;8961:33;;;;;;;;;;8611:390;;:::o;11147:328::-;11253:4;11337:13;11274:15;:2;-1:-1:-1;;;;;11274:13:37;;:15::i;:::-;11273:16;11269:58;;;11312:4;11305:11;;;;11269:58;11353:70;;;;;11390:10;11353:70;;;;;;-1:-1:-1;;;;;11353:70:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;:36;;;;;;11390:10;11402:4;;11408:7;;11417:5;;11353:70;;;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11353:70:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11353:70:37;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11353:70:37;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11353:70:37;-1:-1:-1;;11441:26:37;;11451:16;11441:26;;-1:-1:-1;11353:70:37;-1:-1:-1;11147:328:37;;;;;;;;:::o;11636:171::-;11735:1;11699:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11699:24:37;:38;11695:106;;11788:1;11753:24;;;:15;:24;;;;;:37;;-1:-1:-1;;11753:37:37;;;11636:171::o;265:199:58:-;323:7;;350:6;;;;342:69;;;;;-1:-1:-1;;;;;342:69:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;433:5:58;;;265:199::o;545:198::-;603:7;634:5;;;657:6;;;;649:68;;;;;-1:-1:-1;;;;;649:68:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2272:240:40;2338:27;2350:5;2357:7;2338:11;:27::i;:::-;2421:19;;;;:10;:19;;;;;2415:33;;-1:-1:-1;;2415:33:40;;;;;;;;;;;:38;2411:95;;2476:19;;;;:10;:19;;;;;2469:26;;;:::i;:::-;2272:240;;:::o;463:624:61:-;523:4;1034:20;;1072:8;;463:624::o;9274:305:37:-;9368:5;-1:-1:-1;;;;;9348:25:37;:16;9356:7;9348;:16::i;:::-;-1:-1:-1;;;;;9348:25:37;;9340:34;;;;;;9385:23;9400:7;9385:14;:23::i;:::-;-1:-1:-1;;;;;9446:24:37;;;;;;:17;:24;;;;;;:31;;9475:1;9446:31;:28;:31;:::i;:::-;-1:-1:-1;;;;;9419:24:37;;;;;;:17;:24;;;;;;;;:58;;;;9487:20;;;:11;:20;;;;;:33;;-1:-1:-1;;9487:33:37;;;9536:36;;;;;;;9419:24;;9536:36;;;;;;;;;;;9274:305;;:::o;1005:4511:72:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity 0.4.25;\n\n// external dependencies\nimport \"../openzeppelin/ERC721/ERC721Burnable.sol\";\nimport \"../openzeppelin/ERC721/ERC721Metadata.sol\";\n\n// internal dependencies\n// import \"./Verify.sol\";\nimport \"../Storage.sol\";\n\n\n/// @notice  RAYT are an ERC721 compatible token that represent a users 'stake' or\n///         position in a particular RAY portfolio pool. That is, in the high-level pools.\n///\n/// @dev    The RAYT is meant to be eternal. We don't want to need to upgrade\n///         the token contract which is why this is bare bones to the standard.\n///         We prefer eternal token because it's better for interoperability. If\n///         we upgrade our token contract, all third-party places we're listed\n///         such as wallets or exchanges, need to switch too.\n///\n///         As such, only the TokenWrapper can access the functions held here in\n///         case we wish to change the permissions/logic access control on them\n///\n/// Author:  Devan Purhar\n/// Version: 1.0.0\ncontract RAYToken is ERC721Burnable, ERC721Metadata {\n\n\n  /*************** STORAGE VARIABLE DECLARATIONS **************/\n\n\n    // contracts used\n    bytes32 internal constant TOKEN_WRAPPER_CONTRACT = keccak256(\"TokenWrapperContract\");\n\n    Storage public _storage;\n    uint internal salt;\n\n\n    /*************** MODIFIER DECLARATIONS **************/\n\n\n    /// @notice  Requires the caller is our TokenWrapper contract\n    modifier onlyTokenWrapper()\n    {\n        require(\n            _storage.getContractAddress(TOKEN_WRAPPER_CONTRACT) == msg.sender,\n            \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\"\n        );\n\n        _;\n    }\n\n\n    /////////////////////// FUNCTION DECLARATIONS BEGIN ///////////////////////\n\n    /******************* PUBLIC FUNCTIONS *******************/\n\n\n    /// @notice Constructs an ERC721 RAYT contract. Sets the name to be\n    ///         \"Robo Advisor for Yield\" and the ticker to \"RAY\".\n    ///\n    /// @param   __storage - The Storage contracts address\n    constructor(address __storage)\n\t\t  ERC721Metadata(\"Robo Advisor for Yield\", \"RAY\")\n\t\t  public\n\t  {\n\n      _storage = Storage(__storage);\n\n    }\n\n\n    /** ----------------- ONLY TOKEN WRAPPER MUTATORS ----------------- **/\n\n\n    /// @notice  Mint the unique RAYT and insert it into the token registry.\n    ///\n    /// @dev     'key' is not currently used but I'm keeping it for now for\n    ///           flexibility in the future\n    ///\n    /// @param   beneficiary is the investor whose receiving the minted token\n    function mintRAYToken(\n      bytes32 /*key*/,\n      address beneficiary\n    )\n      external\n      onlyTokenWrapper\n      returns(bytes32)\n    {\n\n        salt++;\n        bytes32 entryHash = createIssuanceHash(salt);\n\n        super._mint(beneficiary, uint(entryHash));\n\n        return entryHash;\n    }\n\n\n    /** ----------------- OVER-RIDDEN VIEW ACCESSORS ----------------- **/\n\n\n    /// @notice  Gets the beneficiary/owner of the entered token.\n    ///\n    /// @dev     Simple wrapper over the ERC721 standard function. Not required\n    ///          since it doesn't override it. Uses naming that better fits\n    ///          our use-case but besides that doesn't add anything.\n    ///\n    /// @param   tokenId - The token's id we're trying to get the owner of\n    ///\n    /// @return  The beneficiary/owner of the entered token.\n    function getBeneficiary(bytes32 tokenId)\n    \texternal\n    \tview\n    \treturns(address)\n    {\n        return super.ownerOf(uint(tokenId));\n    }\n\n\n    /// @notice  Checks if a RAYT with the specified ID exists\n    ///\n    /// @dev     This is used to verify a token Id being entered for mutation\n    ///          in other contracts RAYT exists, since it would be bad to\n    ///          mutate storage of a RAYT yet to be minted (attack vector)\n    ///\n    ///          This is also a somewhat meaningless wrapper around the ERC721\n    ///          standard function. Can be removed and refactor all to directly\n    ///          call _exists.\n    ///\n    /// @param   tokenId - The id of the token we're checking's existence of\n    ///\n    /// @return  true if token does exist or false if doesn't\n    function tokenExists(bytes32 tokenId)\n      external\n      view\n      returns (bool exists)\n    {\n      return super._exists(uint(tokenId));\n    }\n\n\n    /*************** INTERNAL FUNCTIONS **************/\n\n\n    /// @notice  Helper function for computing the token id of a RAYT for issuance.\n    ///\n    /// @dev     The hash/id is completely deterministic, but that shouldn't matter\n    ///          since we have checks in place in other contracts to ensure\n    ///          the integrity of a token id being entered (true owner/exists)\n    ///\n    ///          With that hash formula, what are the odds we have a collision?\n    ///          Even if we did, the mint() would throw an error so it's\n    ///          not going to overwrite the existing RAYT.\n    ///\n    /// @param   _salt - The variable we use to ensure token id's are unique from\n    ///                  each other.\n    ///\n    /// TODO:     Stop passing in _salt as a parameter - waste of gas since its\n    ///           already available in the global storage. Unless it's cheaper\n    ///           to pass as an internal parameter over accessing global storage?\n    function createIssuanceHash(uint _salt) internal view returns(bytes32)\n    {\n        bytes32 issuanceHash = keccak256(abi.encodePacked(address(this), _salt));\n        return issuanceHash;\n    }\n\n}\n",
  "sourcePath": "/source/contracts/protocol/impl/tokens/RAYToken.sol",
  "ast": {
    "absolutePath": "/source/contracts/protocol/impl/tokens/RAYToken.sol",
    "exportedSymbols": {
      "RAYToken": [
        15291
      ]
    },
    "id": 15292,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15159,
        "literals": [
          "solidity",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:72"
      },
      {
        "absolutePath": "/source/contracts/protocol/impl/openzeppelin/ERC721/ERC721Burnable.sol",
        "file": "../openzeppelin/ERC721/ERC721Burnable.sol",
        "id": 15160,
        "nodeType": "ImportDirective",
        "scope": 15292,
        "sourceUnit": 10021,
        "src": "50:51:72",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/source/contracts/protocol/impl/openzeppelin/ERC721/ERC721Metadata.sol",
        "file": "../openzeppelin/ERC721/ERC721Metadata.sol",
        "id": 15161,
        "nodeType": "ImportDirective",
        "scope": 15292,
        "sourceUnit": 10172,
        "src": "102:51:72",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/source/contracts/protocol/impl/Storage.sol",
        "file": "../Storage.sol",
        "id": 15162,
        "nodeType": "ImportDirective",
        "scope": 15292,
        "sourceUnit": 7245,
        "src": "206:24:72",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15163,
              "name": "ERC721Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10020,
              "src": "1026:14:72",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Burnable_$10020",
                "typeString": "contract ERC721Burnable"
              }
            },
            "id": 15164,
            "nodeType": "InheritanceSpecifier",
            "src": "1026:14:72"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15165,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10171,
              "src": "1042:14:72",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$10171",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 15166,
            "nodeType": "InheritanceSpecifier",
            "src": "1042:14:72"
          }
        ],
        "contractDependencies": [
          9996,
          10020,
          10171,
          10274,
          10297,
          11244,
          11391
        ],
        "contractKind": "contract",
        "documentation": "@notice  RAYT are an ERC721 compatible token that represent a users 'stake' or\n         position in a particular RAY portfolio pool. That is, in the high-level pools.\n\n/// @dev    The RAYT is meant to be eternal. We don't want to need to upgrade\n         the token contract which is why this is bare bones to the standard.\n         We prefer eternal token because it's better for interoperability. If\n         we upgrade our token contract, all third-party places we're listed\n         such as wallets or exchanges, need to switch too.\n\n///         As such, only the TokenWrapper can access the functions held here in\n         case we wish to change the permissions/logic access control on them\n\n/// Author:  Devan Purhar\n Version: 1.0.0",
        "fullyImplemented": true,
        "id": 15291,
        "linearizedBaseContracts": [
          15291,
          10171,
          10297,
          10020,
          9996,
          10274,
          11244,
          11391
        ],
        "name": "RAYToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 15171,
            "name": "TOKEN_WRAPPER_CONTRACT",
            "nodeType": "VariableDeclaration",
            "scope": 15291,
            "src": "1154:84:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 15167,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1154:7:72",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "546f6b656e57726170706572436f6e7472616374",
                  "id": 15169,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1215:22:72",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  },
                  "value": "TokenWrapperContract"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  }
                ],
                "id": 15168,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 19800,
                "src": "1205:9:72",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                  "typeString": "function () pure returns (bytes32)"
                }
              },
              "id": 15170,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1205:33:72",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 15173,
            "name": "_storage",
            "nodeType": "VariableDeclaration",
            "scope": 15291,
            "src": "1245:23:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Storage_$7244",
              "typeString": "contract Storage"
            },
            "typeName": {
              "contractScope": null,
              "id": 15172,
              "name": "Storage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7244,
              "src": "1245:7:72",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Storage_$7244",
                "typeString": "contract Storage"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 15175,
            "name": "salt",
            "nodeType": "VariableDeclaration",
            "scope": 15291,
            "src": "1274:18:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 15174,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1274:4:72",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 15189,
              "nodeType": "Block",
              "src": "1459:210:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 15184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 15180,
                              "name": "TOKEN_WRAPPER_CONTRACT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15171,
                              "src": "1518:22:72",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 15178,
                              "name": "_storage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15173,
                              "src": "1490:8:72",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Storage_$7244",
                                "typeString": "contract Storage"
                              }
                            },
                            "id": 15179,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getContractAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6165,
                            "src": "1490:27:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 15181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1490:51:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 15182,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19806,
                            "src": "1545:3:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 15183,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1545:10:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1490:65:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "23524159546f6b656e206f6e6c79546f6b656e57726170706572204d6f6469666965723a204f6e6c7920546f6b656e20577261707065722063616e2063616c6c2074686973",
                        "id": 15185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1569:71:72",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        },
                        "value": "#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        }
                      ],
                      "id": 15177,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        19809,
                        19810
                      ],
                      "referencedDeclaration": 19810,
                      "src": "1469:7:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 15186,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1469:181:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15187,
                  "nodeType": "ExpressionStatement",
                  "src": "1469:181:72"
                },
                {
                  "id": 15188,
                  "nodeType": "PlaceholderStatement",
                  "src": "1661:1:72"
                }
              ]
            },
            "documentation": "@notice  Requires the caller is our TokenWrapper contract",
            "id": 15190,
            "name": "onlyTokenWrapper",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 15176,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1452:2:72"
            },
            "src": "1427:242:72",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 15205,
              "nodeType": "Block",
              "src": "2124:46:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15203,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 15199,
                      "name": "_storage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15173,
                      "src": "2133:8:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7244",
                        "typeString": "contract Storage"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 15201,
                          "name": "__storage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15192,
                          "src": "2152:9:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 15200,
                        "name": "Storage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7244,
                        "src": "2144:7:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Storage_$7244_$",
                          "typeString": "type(contract Storage)"
                        }
                      },
                      "id": 15202,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2144:18:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7244",
                        "typeString": "contract Storage"
                      }
                    },
                    "src": "2133:29:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Storage_$7244",
                      "typeString": "contract Storage"
                    }
                  },
                  "id": 15204,
                  "nodeType": "ExpressionStatement",
                  "src": "2133:29:72"
                }
              ]
            },
            "documentation": "@notice Constructs an ERC721 RAYT contract. Sets the name to be\n         \"Robo Advisor for Yield\" and the ticker to \"RAY\".\n\n    /// @param   __storage - The Storage contracts address",
            "id": 15206,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "526f626f2041647669736f7220666f72205969656c64",
                    "id": 15195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2077:24:72",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b6ee325484c5a8aa53e3d36bb45825af89298554d3f712b125f547bee4a508fa",
                      "typeString": "literal_string \"Robo Advisor for Yield\""
                    },
                    "value": "Robo Advisor for Yield"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "524159",
                    "id": 15196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2103:5:72",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_6220ca3f77e0f4084fd86eb452630b5b212a90ba8ff64282483fe0d6aee3fe3d",
                      "typeString": "literal_string \"RAY\""
                    },
                    "value": "RAY"
                  }
                ],
                "id": 15197,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 15194,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 10171,
                  "src": "2062:14:72",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$10171_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2062:47:72"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15192,
                  "name": "__storage",
                  "nodeType": "VariableDeclaration",
                  "scope": 15206,
                  "src": "2039:17:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15191,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2039:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2038:19:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15198,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2124:0:72"
            },
            "scope": 15291,
            "src": "2027:143:72",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15237,
              "nodeType": "Block",
              "src": "2689:157:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15218,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "2700:6:72",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 15217,
                      "name": "salt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15175,
                      "src": "2700:4:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 15219,
                  "nodeType": "ExpressionStatement",
                  "src": "2700:6:72"
                },
                {
                  "assignments": [
                    15221
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 15221,
                      "name": "entryHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 15238,
                      "src": "2716:17:72",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 15220,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2716:7:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 15225,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 15223,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15175,
                        "src": "2755:4:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 15222,
                      "name": "createIssuanceHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15290,
                      "src": "2736:18:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256) view returns (bytes32)"
                      }
                    },
                    "id": 15224,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2736:24:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2716:44:72"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 15229,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15210,
                        "src": "2783:11:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 15231,
                            "name": "entryHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15221,
                            "src": "2801:9:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 15230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2796:4:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 15232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2796:15:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15226,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19992,
                        "src": "2771:5:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$15291",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 15228,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9808,
                      "src": "2771:11:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 15233,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2771:41:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15234,
                  "nodeType": "ExpressionStatement",
                  "src": "2771:41:72"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15235,
                    "name": "entryHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 15221,
                    "src": "2830:9:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 15216,
                  "id": 15236,
                  "nodeType": "Return",
                  "src": "2823:16:72"
                }
              ]
            },
            "documentation": "@notice  Mint the unique RAYT and insert it into the token registry.\n\n    /// @dev     'key' is not currently used but I'm keeping it for now for\n           flexibility in the future\n\n    /// @param   beneficiary is the investor whose receiving the minted token",
            "id": 15238,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 15213,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 15212,
                  "name": "onlyTokenWrapper",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 15190,
                  "src": "2645:16:72",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2645:16:72"
              }
            ],
            "name": "mintRAYToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15211,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15208,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15238,
                  "src": "2575:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15207,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2575:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15210,
                  "name": "beneficiary",
                  "nodeType": "VariableDeclaration",
                  "scope": 15238,
                  "src": "2598:19:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15209,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2598:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2567:56:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15215,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15238,
                  "src": "2676:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15214,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2676:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2675:9:72"
            },
            "scope": 15291,
            "src": "2546:300:72",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 15252,
              "nodeType": "Block",
              "src": "3472:52:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 15248,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15240,
                            "src": "3508:7:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 15247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3503:4:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 15249,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3503:13:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15245,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19992,
                        "src": "3489:5:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$15291",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 15246,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9528,
                      "src": "3489:13:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 15250,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3489:28:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 15244,
                  "id": 15251,
                  "nodeType": "Return",
                  "src": "3482:35:72"
                }
              ]
            },
            "documentation": "@notice  Gets the beneficiary/owner of the entered token.\n\n    /// @dev     Simple wrapper over the ERC721 standard function. Not required\n          since it doesn't override it. Uses naming that better fits\n          our use-case but besides that doesn't add anything.\n\n    /// @param   tokenId - The token's id we're trying to get the owner of\n\n    /// @return  The beneficiary/owner of the entered token.",
            "id": 15253,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getBeneficiary",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15240,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 15253,
                  "src": "3405:15:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15239,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3405:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3404:17:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15243,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15253,
                  "src": "3459:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15242,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3459:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3458:9:72"
            },
            "scope": 15291,
            "src": "3381:143:72",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 15267,
              "nodeType": "Block",
              "src": "4278:50:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 15263,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15255,
                            "src": "4312:7:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 15262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4307:4:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 15264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4307:13:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15260,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19992,
                        "src": "4293:5:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$15291",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 15261,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_exists",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9726,
                      "src": "4293:13:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 15265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4293:28:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 15259,
                  "id": 15266,
                  "nodeType": "Return",
                  "src": "4286:35:72"
                }
              ]
            },
            "documentation": "@notice  Checks if a RAYT with the specified ID exists\n\n    /// @dev     This is used to verify a token Id being entered for mutation\n          in other contracts RAYT exists, since it would be bad to\n          mutate storage of a RAYT yet to be minted (attack vector)\n\n    ///          This is also a somewhat meaningless wrapper around the ERC721\n          standard function. Can be removed and refactor all to directly\n          call _exists.\n\n    /// @param   tokenId - The id of the token we're checking's existence of\n\n    /// @return  true if token does exist or false if doesn't",
            "id": 15268,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "tokenExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15256,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15255,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 15268,
                  "src": "4203:15:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15254,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4203:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4202:17:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15258,
                  "name": "exists",
                  "nodeType": "VariableDeclaration",
                  "scope": 15268,
                  "src": "4261:11:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 15257,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4261:4:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4260:13:72"
            },
            "scope": 15291,
            "src": "4182:146:72",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 15289,
              "nodeType": "Block",
              "src": "5395:118:72",
              "statements": [
                {
                  "assignments": [
                    15276
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 15276,
                      "name": "issuanceHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 15290,
                      "src": "5405:20:72",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 15275,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5405:7:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 15286,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 15281,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19991,
                                "src": "5463:4:72",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_RAYToken_$15291",
                                  "typeString": "contract RAYToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_RAYToken_$15291",
                                  "typeString": "contract RAYToken"
                                }
                              ],
                              "id": 15280,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5455:7:72",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 15282,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5455:13:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 15283,
                            "name": "_salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15270,
                            "src": "5470:5:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 15278,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19793,
                            "src": "5438:3:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 15279,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5438:16:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 15284,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5438:38:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 15277,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19800,
                      "src": "5428:9:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                        "typeString": "function () pure returns (bytes32)"
                      }
                    },
                    "id": 15285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5428:49:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5405:72:72"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15287,
                    "name": "issuanceHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 15276,
                    "src": "5494:12:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 15274,
                  "id": 15288,
                  "nodeType": "Return",
                  "src": "5487:19:72"
                }
              ]
            },
            "documentation": "@notice  Helper function for computing the token id of a RAYT for issuance.\n\n    /// @dev     The hash/id is completely deterministic, but that shouldn't matter\n          since we have checks in place in other contracts to ensure\n          the integrity of a token id being entered (true owner/exists)\n\n    ///          With that hash formula, what are the odds we have a collision?\n          Even if we did, the mint() would throw an error so it's\n          not going to overwrite the existing RAYT.\n\n    /// @param   _salt - The variable we use to ensure token id's are unique from\n                  each other.\n\n    /// TODO:     Stop passing in _salt as a parameter - waste of gas since its\n           already available in the global storage. Unless it's cheaper\n           to pass as an internal parameter over accessing global storage?",
            "id": 15290,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "createIssuanceHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15270,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 15290,
                  "src": "5348:10:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15269,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5348:4:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5347:12:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15273,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15290,
                  "src": "5382:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15272,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5382:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5381:9:72"
            },
            "scope": 15291,
            "src": "5320:193:72",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 15292,
        "src": "1005:4511:72"
      }
    ],
    "src": "0:5517:72"
  },
  "legacyAST": {
    "absolutePath": "/source/contracts/protocol/impl/tokens/RAYToken.sol",
    "exportedSymbols": {
      "RAYToken": [
        15291
      ]
    },
    "id": 15292,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15159,
        "literals": [
          "solidity",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:72"
      },
      {
        "absolutePath": "/source/contracts/protocol/impl/openzeppelin/ERC721/ERC721Burnable.sol",
        "file": "../openzeppelin/ERC721/ERC721Burnable.sol",
        "id": 15160,
        "nodeType": "ImportDirective",
        "scope": 15292,
        "sourceUnit": 10021,
        "src": "50:51:72",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/source/contracts/protocol/impl/openzeppelin/ERC721/ERC721Metadata.sol",
        "file": "../openzeppelin/ERC721/ERC721Metadata.sol",
        "id": 15161,
        "nodeType": "ImportDirective",
        "scope": 15292,
        "sourceUnit": 10172,
        "src": "102:51:72",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/source/contracts/protocol/impl/Storage.sol",
        "file": "../Storage.sol",
        "id": 15162,
        "nodeType": "ImportDirective",
        "scope": 15292,
        "sourceUnit": 7245,
        "src": "206:24:72",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15163,
              "name": "ERC721Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10020,
              "src": "1026:14:72",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Burnable_$10020",
                "typeString": "contract ERC721Burnable"
              }
            },
            "id": 15164,
            "nodeType": "InheritanceSpecifier",
            "src": "1026:14:72"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15165,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10171,
              "src": "1042:14:72",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$10171",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 15166,
            "nodeType": "InheritanceSpecifier",
            "src": "1042:14:72"
          }
        ],
        "contractDependencies": [
          9996,
          10020,
          10171,
          10274,
          10297,
          11244,
          11391
        ],
        "contractKind": "contract",
        "documentation": "@notice  RAYT are an ERC721 compatible token that represent a users 'stake' or\n         position in a particular RAY portfolio pool. That is, in the high-level pools.\n\n/// @dev    The RAYT is meant to be eternal. We don't want to need to upgrade\n         the token contract which is why this is bare bones to the standard.\n         We prefer eternal token because it's better for interoperability. If\n         we upgrade our token contract, all third-party places we're listed\n         such as wallets or exchanges, need to switch too.\n\n///         As such, only the TokenWrapper can access the functions held here in\n         case we wish to change the permissions/logic access control on them\n\n/// Author:  Devan Purhar\n Version: 1.0.0",
        "fullyImplemented": true,
        "id": 15291,
        "linearizedBaseContracts": [
          15291,
          10171,
          10297,
          10020,
          9996,
          10274,
          11244,
          11391
        ],
        "name": "RAYToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 15171,
            "name": "TOKEN_WRAPPER_CONTRACT",
            "nodeType": "VariableDeclaration",
            "scope": 15291,
            "src": "1154:84:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 15167,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1154:7:72",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "546f6b656e57726170706572436f6e7472616374",
                  "id": 15169,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1215:22:72",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  },
                  "value": "TokenWrapperContract"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  }
                ],
                "id": 15168,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 19800,
                "src": "1205:9:72",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                  "typeString": "function () pure returns (bytes32)"
                }
              },
              "id": 15170,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1205:33:72",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 15173,
            "name": "_storage",
            "nodeType": "VariableDeclaration",
            "scope": 15291,
            "src": "1245:23:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Storage_$7244",
              "typeString": "contract Storage"
            },
            "typeName": {
              "contractScope": null,
              "id": 15172,
              "name": "Storage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7244,
              "src": "1245:7:72",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Storage_$7244",
                "typeString": "contract Storage"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 15175,
            "name": "salt",
            "nodeType": "VariableDeclaration",
            "scope": 15291,
            "src": "1274:18:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 15174,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1274:4:72",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 15189,
              "nodeType": "Block",
              "src": "1459:210:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 15184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 15180,
                              "name": "TOKEN_WRAPPER_CONTRACT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15171,
                              "src": "1518:22:72",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 15178,
                              "name": "_storage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15173,
                              "src": "1490:8:72",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Storage_$7244",
                                "typeString": "contract Storage"
                              }
                            },
                            "id": 15179,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getContractAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6165,
                            "src": "1490:27:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 15181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1490:51:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 15182,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19806,
                            "src": "1545:3:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 15183,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1545:10:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1490:65:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "23524159546f6b656e206f6e6c79546f6b656e57726170706572204d6f6469666965723a204f6e6c7920546f6b656e20577261707065722063616e2063616c6c2074686973",
                        "id": 15185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1569:71:72",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        },
                        "value": "#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        }
                      ],
                      "id": 15177,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        19809,
                        19810
                      ],
                      "referencedDeclaration": 19810,
                      "src": "1469:7:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 15186,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1469:181:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15187,
                  "nodeType": "ExpressionStatement",
                  "src": "1469:181:72"
                },
                {
                  "id": 15188,
                  "nodeType": "PlaceholderStatement",
                  "src": "1661:1:72"
                }
              ]
            },
            "documentation": "@notice  Requires the caller is our TokenWrapper contract",
            "id": 15190,
            "name": "onlyTokenWrapper",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 15176,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1452:2:72"
            },
            "src": "1427:242:72",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 15205,
              "nodeType": "Block",
              "src": "2124:46:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15203,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 15199,
                      "name": "_storage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15173,
                      "src": "2133:8:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7244",
                        "typeString": "contract Storage"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 15201,
                          "name": "__storage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15192,
                          "src": "2152:9:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 15200,
                        "name": "Storage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7244,
                        "src": "2144:7:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Storage_$7244_$",
                          "typeString": "type(contract Storage)"
                        }
                      },
                      "id": 15202,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2144:18:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7244",
                        "typeString": "contract Storage"
                      }
                    },
                    "src": "2133:29:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Storage_$7244",
                      "typeString": "contract Storage"
                    }
                  },
                  "id": 15204,
                  "nodeType": "ExpressionStatement",
                  "src": "2133:29:72"
                }
              ]
            },
            "documentation": "@notice Constructs an ERC721 RAYT contract. Sets the name to be\n         \"Robo Advisor for Yield\" and the ticker to \"RAY\".\n\n    /// @param   __storage - The Storage contracts address",
            "id": 15206,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "526f626f2041647669736f7220666f72205969656c64",
                    "id": 15195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2077:24:72",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b6ee325484c5a8aa53e3d36bb45825af89298554d3f712b125f547bee4a508fa",
                      "typeString": "literal_string \"Robo Advisor for Yield\""
                    },
                    "value": "Robo Advisor for Yield"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "524159",
                    "id": 15196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2103:5:72",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_6220ca3f77e0f4084fd86eb452630b5b212a90ba8ff64282483fe0d6aee3fe3d",
                      "typeString": "literal_string \"RAY\""
                    },
                    "value": "RAY"
                  }
                ],
                "id": 15197,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 15194,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 10171,
                  "src": "2062:14:72",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$10171_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2062:47:72"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15192,
                  "name": "__storage",
                  "nodeType": "VariableDeclaration",
                  "scope": 15206,
                  "src": "2039:17:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15191,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2039:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2038:19:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15198,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2124:0:72"
            },
            "scope": 15291,
            "src": "2027:143:72",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15237,
              "nodeType": "Block",
              "src": "2689:157:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15218,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "2700:6:72",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 15217,
                      "name": "salt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15175,
                      "src": "2700:4:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 15219,
                  "nodeType": "ExpressionStatement",
                  "src": "2700:6:72"
                },
                {
                  "assignments": [
                    15221
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 15221,
                      "name": "entryHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 15238,
                      "src": "2716:17:72",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 15220,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2716:7:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 15225,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 15223,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15175,
                        "src": "2755:4:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 15222,
                      "name": "createIssuanceHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15290,
                      "src": "2736:18:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256) view returns (bytes32)"
                      }
                    },
                    "id": 15224,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2736:24:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2716:44:72"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 15229,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15210,
                        "src": "2783:11:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 15231,
                            "name": "entryHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15221,
                            "src": "2801:9:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 15230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2796:4:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 15232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2796:15:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15226,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19992,
                        "src": "2771:5:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$15291",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 15228,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9808,
                      "src": "2771:11:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 15233,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2771:41:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15234,
                  "nodeType": "ExpressionStatement",
                  "src": "2771:41:72"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15235,
                    "name": "entryHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 15221,
                    "src": "2830:9:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 15216,
                  "id": 15236,
                  "nodeType": "Return",
                  "src": "2823:16:72"
                }
              ]
            },
            "documentation": "@notice  Mint the unique RAYT and insert it into the token registry.\n\n    /// @dev     'key' is not currently used but I'm keeping it for now for\n           flexibility in the future\n\n    /// @param   beneficiary is the investor whose receiving the minted token",
            "id": 15238,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 15213,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 15212,
                  "name": "onlyTokenWrapper",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 15190,
                  "src": "2645:16:72",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2645:16:72"
              }
            ],
            "name": "mintRAYToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15211,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15208,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15238,
                  "src": "2575:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15207,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2575:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15210,
                  "name": "beneficiary",
                  "nodeType": "VariableDeclaration",
                  "scope": 15238,
                  "src": "2598:19:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15209,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2598:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2567:56:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15215,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15238,
                  "src": "2676:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15214,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2676:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2675:9:72"
            },
            "scope": 15291,
            "src": "2546:300:72",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 15252,
              "nodeType": "Block",
              "src": "3472:52:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 15248,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15240,
                            "src": "3508:7:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 15247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3503:4:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 15249,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3503:13:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15245,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19992,
                        "src": "3489:5:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$15291",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 15246,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9528,
                      "src": "3489:13:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 15250,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3489:28:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 15244,
                  "id": 15251,
                  "nodeType": "Return",
                  "src": "3482:35:72"
                }
              ]
            },
            "documentation": "@notice  Gets the beneficiary/owner of the entered token.\n\n    /// @dev     Simple wrapper over the ERC721 standard function. Not required\n          since it doesn't override it. Uses naming that better fits\n          our use-case but besides that doesn't add anything.\n\n    /// @param   tokenId - The token's id we're trying to get the owner of\n\n    /// @return  The beneficiary/owner of the entered token.",
            "id": 15253,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getBeneficiary",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15240,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 15253,
                  "src": "3405:15:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15239,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3405:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3404:17:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15243,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15253,
                  "src": "3459:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15242,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3459:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3458:9:72"
            },
            "scope": 15291,
            "src": "3381:143:72",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 15267,
              "nodeType": "Block",
              "src": "4278:50:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 15263,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15255,
                            "src": "4312:7:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 15262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4307:4:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 15264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4307:13:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15260,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19992,
                        "src": "4293:5:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$15291",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 15261,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_exists",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9726,
                      "src": "4293:13:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 15265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4293:28:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 15259,
                  "id": 15266,
                  "nodeType": "Return",
                  "src": "4286:35:72"
                }
              ]
            },
            "documentation": "@notice  Checks if a RAYT with the specified ID exists\n\n    /// @dev     This is used to verify a token Id being entered for mutation\n          in other contracts RAYT exists, since it would be bad to\n          mutate storage of a RAYT yet to be minted (attack vector)\n\n    ///          This is also a somewhat meaningless wrapper around the ERC721\n          standard function. Can be removed and refactor all to directly\n          call _exists.\n\n    /// @param   tokenId - The id of the token we're checking's existence of\n\n    /// @return  true if token does exist or false if doesn't",
            "id": 15268,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "tokenExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15256,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15255,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 15268,
                  "src": "4203:15:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15254,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4203:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4202:17:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15258,
                  "name": "exists",
                  "nodeType": "VariableDeclaration",
                  "scope": 15268,
                  "src": "4261:11:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 15257,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4261:4:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4260:13:72"
            },
            "scope": 15291,
            "src": "4182:146:72",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 15289,
              "nodeType": "Block",
              "src": "5395:118:72",
              "statements": [
                {
                  "assignments": [
                    15276
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 15276,
                      "name": "issuanceHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 15290,
                      "src": "5405:20:72",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 15275,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5405:7:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 15286,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 15281,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19991,
                                "src": "5463:4:72",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_RAYToken_$15291",
                                  "typeString": "contract RAYToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_RAYToken_$15291",
                                  "typeString": "contract RAYToken"
                                }
                              ],
                              "id": 15280,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5455:7:72",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 15282,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5455:13:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 15283,
                            "name": "_salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15270,
                            "src": "5470:5:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 15278,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19793,
                            "src": "5438:3:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 15279,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5438:16:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 15284,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5438:38:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 15277,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19800,
                      "src": "5428:9:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                        "typeString": "function () pure returns (bytes32)"
                      }
                    },
                    "id": 15285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5428:49:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5405:72:72"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15287,
                    "name": "issuanceHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 15276,
                    "src": "5494:12:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 15274,
                  "id": 15288,
                  "nodeType": "Return",
                  "src": "5487:19:72"
                }
              ]
            },
            "documentation": "@notice  Helper function for computing the token id of a RAYT for issuance.\n\n    /// @dev     The hash/id is completely deterministic, but that shouldn't matter\n          since we have checks in place in other contracts to ensure\n          the integrity of a token id being entered (true owner/exists)\n\n    ///          With that hash formula, what are the odds we have a collision?\n          Even if we did, the mint() would throw an error so it's\n          not going to overwrite the existing RAYT.\n\n    /// @param   _salt - The variable we use to ensure token id's are unique from\n                  each other.\n\n    /// TODO:     Stop passing in _salt as a parameter - waste of gas since its\n           already available in the global storage. Unless it's cheaper\n           to pass as an internal parameter over accessing global storage?",
            "id": 15290,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "createIssuanceHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15270,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 15290,
                  "src": "5348:10:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15269,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5348:4:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5347:12:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 15274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15273,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 15290,
                  "src": "5382:7:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 15272,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5382:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5381:9:72"
            },
            "scope": 15291,
            "src": "5320:193:72",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 15292,
        "src": "1005:4511:72"
      }
    ],
    "src": "0:5517:72"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {
    "1": {
      "events": {},
      "links": {},
      "address": "0xE215e8160a5e0A03f2D6c7900b050F2f04eA5Cbb",
      "transactionHash": "0xe474cb21603a718dd31464eb29f62b43612ad1c3a78cd35bc2f552c94e7acf7c"
    },
    "42": {
      "events": {},
      "links": {},
      "address": "0x4B97E0FBe095A5377e96F580E01A02401c39b3Ab",
      "transactionHash": "0x434604586114f398f450fb280891dfc0fcefc3a4f4a00bd99c0d8d12c0589f0f"
    }
  },
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-09-09T19:57:35.287Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "getBeneficiary(bytes32)": {
        "details": "Simple wrapper over the ERC721 standard function. Not required          since it doesn't override it. Uses naming that better fits          our use-case but besides that doesn't add anything. ",
        "params": {
          "tokenId": "- The token's id we're trying to get the owner of "
        },
        "return": "The beneficiary/owner of the entered token."
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mintRAYToken(bytes32,address)": {
        "details": "'key' is not currently used but I'm keeping it for now for           flexibility in the future ",
        "params": {
          "beneficiary": "is the investor whose receiving the minted token"
        }
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenExists(bytes32)": {
        "details": "This is used to verify a token Id being entered for mutation          in other contracts RAYT exists, since it would be bad to          mutate storage of a RAYT yet to be minted (attack vector)     ///          This is also a somewhat meaningless wrapper around the ERC721          standard function. Can be removed and refactor all to directly          call _exists. ",
        "params": {
          "tokenId": "- The id of the token we're checking's existence of "
        },
        "return": "true if token does exist or false if doesn't"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "getBeneficiary(bytes32)": {
        "notice": "Gets the beneficiary/owner of the entered token. "
      },
      "mintRAYToken(bytes32,address)": {
        "notice": "Mint the unique RAYT and insert it into the token registry. "
      },
      "tokenExists(bytes32)": {
        "notice": "Checks if a RAYT with the specified ID exists "
      }
    }
  }
}